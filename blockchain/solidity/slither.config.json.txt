Why is some slither detectors off? They have severity: Informational или Low.

1) calls-loop
Calls of balanceOf/convertToAssets/distribute functions are used .
Nothing to do here.
https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

2) events-access
It is required that there must be events in all setters. For example:

function setSupplyManager(address supplyManagerAddress) external onlyOwner {
    supplyManager = supplyManagerAddress;
}
Should we add evens?
https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

3) events-maths
It's same as events-access. . For example:
function setTotalPoolSupply(uint256 pool) external onlyOwner {
    _pool = pool;
}
Should we add evens?
https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

4) missing-zero-check
There must be zero address validation in constructors and setters. For example:
constructor(
    address owner,
    address service,
    address ygtTokenAddr,
    uint256 minDeposit,
    uint256 minWithdraw
) Ownable(owner) ServiceOwnable(service) {
    YGT_TOKEN = ygtTokenAddr;
    minDepositValue = minDeposit;
    minWithdrawValue = minWithdraw;
}
Check that owner, service and ygtTokenAddr is not zero? Or is it not worth it?
https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

4) naming-convention
solhint и slither didn’t agree on the naming of immutable contract variables
solhint requires capital letters.
slither - in mixedCase.
https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

5) redundant-statements

/**
 * @dev Returns the amount of assets that can be redeemed.
 * @param requestId Corresponding ID.
 * @param controller Corresponding controller.
 * @return shares Amount of assets.
 */
function claimableRedeemRequest(
    uint256 requestId,
    address controller
) external pure returns (uint256 shares) {
    requestId;
    controller;
    return 0;
}
We use `requestId;` so that the compiler doesn't complain that `requestId` is not used. We can also remove variables.

For example:
```
function claimableRedeemRequest(
    uint256 ,
    address
) external pure returns (uint256 shares) {
```
But then natspec will complain =)

We can add `// slither-disable-next-line ...` But this will be a large number of changes. Add?
https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

6) reentrancy-events
Slither complains that we emit an event after external calls. But this is normal, since we need to get some data for the event.
https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

7) solc-version
We use 0.8.22 because last supported version in tronbox supported is 0.8.22.
https://github.com/crytic/slither/wiki/Detector-Documentation#configuration-807

8) timestamp
We use timestamp because we need it. Too paranoid warning =)
https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp